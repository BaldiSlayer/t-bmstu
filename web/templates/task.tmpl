<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Задача</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


    </script>

    <style>
        /* Additional custom CSS for indent at the bottom */
        .form-group {
            margin-bottom: 4rem;
        }
    </style>

</head>
<body>
<nav class="navbar navbar-expand-sm bg-dark navbar-dark">
    <!-- Service Name -->
    <a class="navbar-brand" href="/">Сервер</a>

    <!-- Username Dropdown Item -->
    <ul class="navbar-nav ml-auto">
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Alex
            </a>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                <a class="dropdown-item" href="/settings">Settings</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="/logout">Logout</a>
            </div>
        </li>
    </ul>
</nav>


<div class="container mt-5" id="statement">
    <h1> {{.Task.Name}} </h1>

    <div class="problem_limits">
        <!-- TODO вставить ограничения -->
    </div>

    {{.Task.Condition}}

    <h2> Формат ввода </h2>
    {{.Task.InputData}}


    <h2> Формат вывода </h2>
    {{.Task.OutputData}}

    <h2> Примеры тестов </h2>
    <table>
        <tr>
            <th>Input</th>
            <th>Output</th>
        </tr>
        {{range $index, $test := .Tests}}
        <tr>
            <td>{{nl2br $test.Input}}</td>
            <td>{{nl2br $test.Output}}</td>
        </tr>
        {{end}}
    </table>

    <h2> Источник задачи </h2>
    {{nl2br .Task.Source}}

</div>

<div class="form-group container mt-5">
    <div class="mt-4">
        <div class="dropdown mt-4" style="margin-bottom: 2rem;">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Select an language
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                {{range .Languages}}
                    <li><a class="dropdown-item" onclick="selectItem('{{.}}')">{{.}}</a></li>
                {{end}}
            </ul>
        </div>

        <textarea class="form-control" id="Code" rows="8" placeholder="Enter code" style="margin-bottom: 1rem;"></textarea>
    </div>

    <button type="submit" class="btn btn-primary mt-2" onclick="sendRequest()">Submit</button>

    <div class="container mt-4">
        <h1>Посылки</h1>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>ID</th>
                <th>Компилятор</th>
                <th>Вердикт</th>
                <th>Тест</th>
                <th>Время</th>
                <th>Память</th>
            </tr>
            </thead>
            <tbody>
            {{range .Submissions}}
                <tr data-id="{{.ID}}">
                    <td>{{.ID}}</td>
                    <td>{{.Language}}</td>
                    <td>
                        {{if eq .Verdict "Accepted"}}
                            <span class="badge badge-success">{{.Verdict}}</span>
                        {{else if eq .Verdict "Waiting"}}
                            <span class="badge badge-warning">{{.Verdict}}</span>
                        {{else}}
                            <span class="badge badge-danger">{{.Verdict}}</span>
                        {{end}}
                    </td>
                    <td>{{.Test}}</td>
                    <td>{{.ExecutionTime}}</td>
                    <td>{{.MemoryUsed}}</td>
                </tr>
            {{end}}

            </tbody>
        </table>
    </div>
</div>

<!-- Include Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Include Bootstrap 5 JS (required for dropdown functionality) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.0-beta1/js/bootstrap.bundle.min.js"></script>

<script>
    function updateTable(data) {
        const table = document.querySelector(".table tbody");
        const newRow = document.createElement("tr");

        newRow.setAttribute("data-id", data.id);

        let verdictClass = "";
        if (data.verdict === "Accepted") {
            verdictClass = "badge-success";
        } else if (data.verdict === "Waiting") {
            verdictClass = "badge-warning";
        } else {
            verdictClass = "badge-danger";
        }

        newRow.innerHTML = `
        <td>${data.id}</td>
        <td>${data.language}</td>
        <td><span class="badge ${verdictClass}">${data.verdict}</span></td>
        <td>${data.test}</td>
        <td>${data.execution_time}</td>
        <td>${data.memory_used}</td>
    `;

        // Проверка наличия строки с таким id
        const existingRow = table.querySelector(`tr[data-id="${data.id}"]`);
        console.log(existingRow);
        if (existingRow) {
            existingRow.innerHTML = newRow.innerHTML;
        } else if (data.id > parseInt(table.querySelector("tr:first-child td:first-child").innerText)) {
            table.insertBefore(newRow, table.firstChild);
        }
    }


    const socket = new WebSocket("ws://127.0.0.1:8080/api/ws");

    socket.onmessage = function(event) {
        const message = JSON.parse(event.data);
        console.log(message);

        updateTable(message);
    };

    socket.onclose = function(event) {
        console.log(event)
    };

    socket.onerror = function(event) {
        console.log(event)
    };

    function selectItem(item) {
        document.getElementById('dropdownMenuButton').innerText = item;
    }

    function sendRequest() {
        // construct the API URL
        const apiUrl = window.location.href + '/submit'

        // send a POST request with JSON data
        fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                "sourceCode": document.getElementById("Code").value,
                "language": document.getElementById('dropdownMenuButton').innerText,
            })
        })
            .then(response => {
                if (response.status === 200) {
                    console.log('Request successful');
                    return response.json();
                } else {
                    console.log('Request failed with status:', response.status);
                    throw new Error('Request failed');
                }
            })
            .then(data => {
                console.log('Data:', data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }
</script>

</body>
</html>